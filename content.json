{"meta":{"title":"Life is Short","subtitle":"生命是一场旅行，忘掉过去的烦恼，珍惜眼前的风景——————湫","description":"记录生活, 记录成长","author":"King Xiao","url":"http://xx139.ltd/bloga","root":"/bloga/"},"pages":[{"title":"404 Not Found","date":"2019-11-13T05:49:59.997Z","updated":"2019-11-13T05:49:59.997Z","comments":true,"path":"404/index.html","permalink":"http://xx139.ltd/bloga/404/index.html","excerpt":"","text":"404 Not Found **很抱歉，您访问的页面不存在** 可能是输入地址有误或该地址已被删除"},{"title":"关于我们","date":"2019-11-14T11:00:46.460Z","updated":"2019-11-14T11:00:46.460Z","comments":true,"path":"about/index.html","permalink":"http://xx139.ltd/bloga/about/index.html","excerpt":"","text":""},{"title":"archives","date":"2019-11-13T06:01:41.000Z","updated":"2019-11-13T06:02:51.880Z","comments":true,"path":"archives/index.html","permalink":"http://xx139.ltd/bloga/archives/index.html","excerpt":"","text":""},{"title":"文章分类","date":"2019-11-13T13:02:55.865Z","updated":"2019-11-13T13:02:55.865Z","comments":true,"path":"categories/index.html","permalink":"http://xx139.ltd/bloga/categories/index.html","excerpt":"","text":""},{"title":"资源列表","date":"2019-11-14T14:08:59.432Z","updated":"2019-11-14T14:08:59.432Z","comments":false,"path":"friends/index.html","permalink":"http://xx139.ltd/bloga/friends/index.html","excerpt":"","text":""},{"title":"开源项目","date":"2019-11-13T13:19:55.796Z","updated":"2019-11-13T13:19:55.796Z","comments":false,"path":"projects/index.html","permalink":"http://xx139.ltd/bloga/projects/index.html","excerpt":"","text":""},{"title":"其它","date":"2019-11-14T13:11:31.828Z","updated":"2019-11-14T13:11:31.828Z","comments":false,"path":"others/index.html","permalink":"http://xx139.ltd/bloga/others/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2019-11-13T09:05:36.880Z","updated":"2019-11-12T13:52:23.416Z","comments":true,"path":"tags/index.html","permalink":"http://xx139.ltd/bloga/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Object","slug":"Object","date":"2019-11-11T11:13:12.000Z","updated":"2019-11-13T14:12:59.647Z","comments":true,"path":"2019/11/11/Object/","link":"","permalink":"http://xx139.ltd/bloga/2019/11/11/Object/","excerpt":"Object类是类层次结构的根，它是所有类的超类，所有对象（包括数组）都实现此类的方法。接下来将介绍Object中的方法。","text":"Object类是类层次结构的根，它是所有类的超类，所有对象（包括数组）都实现此类的方法。接下来将介绍Object中的方法。 方法registerNatives1234private static native void registerNatives();static &#123; registerNatives();&#125; registerNatives方法进行本地注册，在类加载时，通过静态代码块调用此方法。 Object1public Object() &#123;&#125; Object类的无参构造。 getClass1public final native Class&lt;?&gt; getClass(); 返回该对象的运行时类。返回的Class对象是被所表示的类的static synchronize锁定的对象。 例子，可转换成其表示的类或其子类： 12Number n = 0;Class&lt;? extends Number&gt; c = n.getClass(); hashCode1public native int hashCode(); 返回对象的hash值（Integer值）。 同一个java应用在执行期间，多次调用同一个对象的hashCode方法必须返回同样的值；不同的应用程序，此值不必相同。 若两个对象调用equals方法结果为true，则调用hashCode也必须返回相同的值；若两个对象调用equals方法为false，则调用hashCode也需返回不同的值（前提是equals方法没有被重写）。 equals123public boolean equals(Object obj) &#123; return (this == obj);&#125; 表示参数对象obj是否和该对象相等。在非null对象引用上，equals方法实现对等关系。 该方法的默认实现是比较该对象与参数对象的引用是否相等（若要通过对象的其它值比较是否相等，则需要重写equals方法）。 1234567891011121314/*对称性*/x.equals(y) -&gt; truey.equals(x) -&gt; true/*传递性*/x.equals(y) -&gt; truey.equals(z) -&gt; truez.equals(x) -&gt; true /*一致性*///在equals未被重写的情况下，x.equals(y)始终为true或false /*非null*/x.equals(null) -&gt; false 1234567891011121314151617181920212223242526272829303132333435class PointX&#123; private int x = 0; private int y = 0; public PointX()&#123;&#125; public PointX(int x, int y)&#123; this.x = x; this.y = y; &#125;&#125;class PointXY&#123; private int x = 0; private int y = 0; public PointXY()&#123;&#125; public PointXY(int x, int y)&#123; this.x = x; this.y = y; &#125; public boolean equals(PointXY obj)&#123; return (this.x == obj.x)&amp;&amp;(this.y == obj.y); &#125;&#125;public class Test &#123; public static void main(String[] args) &#123; PointX p1 = new PointX(3,4); PointX p2 = new PointX(3,4); System.out.println(p1.equals(p2)); PointXY p3 = new PointXY(3,4); PointXY p4 = new PointXY(3,4); System.out.println(p3.equals(p4)); &#125;&#125;result:falsetrue clone1protected native Object clone() throws CloneNotSupportedException; 该方法对对象进行“浅复制”（创建新对象，并用该对象的各字段的值对新对象进行初始化，字段的内容本身不会被克隆，可根据需求实现clone方法）。要调用clone方法，则类需要实现Cloneable接口（数组T[ ]默认已经实现此接口），否则将报CloneNotSupportedException异常。 Object对象并没有实现Cloneable接口，所以Object对象在调用时会抛出了CloneNotSupportedException异常。 若你没有重写clone方法，那么按照公有继承，此方法在子类中默认仍为protected，仍然无法调用。 1234通常情况下：x.clone() != x -&gt; truex.clone().getClass() == x.getClass() -&gt; truex.clone().equals(x) -&gt; true toString1234public String toString() &#123; /*类名+@+十六进制哈希值*/ return getClass().getName() + \"@\" + Integer.toHexString(hashCode());&#125; 返回对象的字符串表示形式（建议子类重写该方法）。 notify/notifyAll1234//唤醒该对象上某个等待的线程public final native void notify();//唤醒该对象上所有等待的线程，唤醒的线程进行竞争，获取对象的锁。public final native void notifyAll(); 唤醒正在此对象监视器上等待的单个线程。可以是任意一个，也可是特殊的选择（看具体实现）。线程通过调用wait方法在对象的监视器上等待。被唤醒的线程不能继续，直到当前线程释放该对象的锁。 wait123456789101112131415161718192021public final native void wait(long timeoutMillis) throws InterruptedException;public final void wait() throws InterruptedException &#123; wait(0L);&#125;public final void wait(long timeoutMillis, int nanos) throws InterruptedException &#123; if (timeoutMillis &lt; 0) &#123; throw new IllegalArgumentException(\"timeoutMillis value is negative\"); &#125; if (nanos &lt; 0 || nanos &gt; 999999) &#123; throw new IllegalArgumentException( \"nanosecond timeout value out of range\"); &#125; if (nanos &gt; 0 &amp;&amp; timeoutMillis &lt; Long.MAX_VALUE) &#123; timeoutMillis++; &#125; wait(timeoutMillis);&#125; 使当前线程等待直到被唤醒（notified、interrupted、或者超时）。返回到与调用wait方法之前相同的状态。 timeoutMillis：最大等待时间，毫秒（1毫秒 = $10^6$纳秒） nanos：附加时间，纳秒 finalize1protected void finalize() throws Throwable &#123; &#125; 垃圾回收是调用此方法。 var ap = new APlayer({ element: document.getElementById(\"aplayer-DjGCLzRU\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"大鱼\", author: \"纯音乐\", url: \"http://www.170mv.com/kw/antiserver.kuwo.cn/anti.s?rid=MUSIC_60075171&response=res&format=mp3|aac&type=convert_url&br=128kmp3&agent=iPhone&callback=getlink&jpcallback=getlink.mp3\", pic: \"\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap);","categories":[{"name":"languages","slug":"languages","permalink":"http://xx139.ltd/bloga/categories/languages/"},{"name":"Java","slug":"languages/Java","permalink":"http://xx139.ltd/bloga/categories/languages/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://xx139.ltd/bloga/tags/Java/"},{"name":"源码","slug":"源码","permalink":"http://xx139.ltd/bloga/tags/%E6%BA%90%E7%A0%81/"},{"name":"Object","slug":"Object","permalink":"http://xx139.ltd/bloga/tags/Object/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-11-05T09:05:43.707Z","updated":"2019-11-12T08:36:24.528Z","comments":true,"path":"2019/11/05/hello-world/","link":"","permalink":"http://xx139.ltd/bloga/2019/11/05/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}